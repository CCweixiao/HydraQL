/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hydraql.benchmark.core.generator;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * An expression that generates a random value in the specified range.
 */
public class UniformGenerator extends Generator<String> {
  private final List<String> values;
  private String laststring;
  private final UniformLongGenerator gen;

  /**
   * Creates a generator that will return strings from the specified set uniformly randomly.
   */
  public UniformGenerator(Collection<String> values) {
    this.values = new ArrayList<>(values);
    laststring = null;
    gen = new UniformLongGenerator(0, values.size() - 1);
  }

  /**
   * Generate the next string in the distribution.
   */
  @Override
  public String nextValue() {
    laststring = values.get(gen.nextValue().intValue());
    return laststring;
  }

  /**
   * Return the previous string generated by the distribution; e.g., returned from the last
   * nextString() call. Calling lastString() should not advance the distribution or have any side
   * effects. If nextString() has not yet been called, lastString() should return something
   * reasonable.
   */
  @Override
  public String lastValue() {
    if (laststring == null) {
      nextValue();
    }
    return laststring;
  }
}
